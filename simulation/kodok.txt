








import traci
import time
import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
import matplotlib.pyplot as plt


sumo_cfg_file = "osm.sumocfg"
junction_id = "cluster_249821091_249821092_249821094_26003449_#13more"   #Fortunaaa
incoming_lanes = [
    "1015631885#1_0", "188302703#1_0", "188302703#1_1", "188302703#1_2",
    "-869087990_0", "-869087990_1", "1015631891#1_0"
]

def setup_fuzzy_system():
    """Fuzzy szab√°lyok be√°ll√≠t√°sa Takagi-Sugeno modellhez."""
    num_vehicles = ctrl.Antecedent(np.arange(0, 50, 1), 'num_vehicles')
    waiting_time = ctrl.Antecedent(np.arange(0, 100, 1), 'waiting_time')
    green_duration = ctrl.Consequent(np.arange(5, 60, 1), 'green_duration')

    num_vehicles.automf(3)  # Alacsony, K√∂zepes, Magas
    waiting_time.automf(3)  # R√∂vid, K√∂zepes, Hossz√∫

    # Manually define fuzzy membership functions for the consequent (green_duration)
    green_duration['poor'] = fuzz.trimf(green_duration.universe, [5, 5, 20])  # Short green light
    green_duration['average'] = fuzz.trimf(green_duration.universe, [15, 30, 45])  # Medium green light
    green_duration['good'] = fuzz.trimf(green_duration.universe, [35, 50, 50])  # Long green light

    # Szab√°lyok defini√°l√°sa
    rule1 = ctrl.Rule(num_vehicles['poor'] & waiting_time['poor'], green_duration['poor'])
    rule2 = ctrl.Rule(num_vehicles['poor'] & waiting_time['average'], green_duration['average'])
    rule3 = ctrl.Rule(num_vehicles['good'] & waiting_time['good'], green_duration['good'])

    traffic_ctrl = ctrl.ControlSystem([rule1, rule2, rule3])
    return ctrl.ControlSystemSimulation(traffic_ctrl)

def run_simulation():
    """SUMO szimul√°ci√≥ futtat√°sa √©s fuzzy l√°mpavez√©rl√©s."""
    print("SUMO szimul√°ci√≥ ind√≠t√°sa...")

    # Ind√≠tsuk el a szimul√°ci√≥t, biztos√≠tva, hogy a f√°jl helyesen van be√°ll√≠tva
    try:
        traci.start(["sumo-gui", "-c", sumo_cfg_file])  # GUI n√©lk√ºl: "sumo"
    except Exception as e:
        print(f"Hiba a szimul√°ci√≥ ind√≠t√°sakor: {e}")
        return  # Ha a szimul√°ci√≥ nem indul, ne folytassuk

    fuzzy_system = setup_fuzzy_system()

    last_green_time = None  # Elt√°roljuk az utols√≥ z√∂ld id≈ët
    change_threshold = 3.0  # 3 m√°sodperc k√ºsz√∂b, amikor a v√°ltoz√°st ki√≠rjuk

    # Itt hozzunk l√©tre egy adatstrukt√∫r√°t, hogy a l√°mp√°k √°llapot√°t nyomon k√∂vethess√ºk
    lane_green_times = {lane: None for lane in incoming_lanes}  # Minden s√°vhoz elt√°roljuk a z√∂ld id≈ët

    while traci.simulation.getMinExpectedNumber() > 0:
        traci.simulationStep()

        total_vehicles = sum(traci.lane.getLastStepVehicleNumber(lane) for lane in incoming_lanes)
        avg_waiting_time = np.mean([traci.lane.getWaitingTime(lane) for lane in incoming_lanes])

        fuzzy_system.input['num_vehicles'] = total_vehicles
        fuzzy_system.input['waiting_time'] = avg_waiting_time
        fuzzy_system.compute()

        try:
            green_time = fuzzy_system.output['green_duration']

            # A z√∂ld id≈ët minden s√°vra alkalmazzuk √©s csak akkor √≠rjuk ki, ha legal√°bb 3 m√°sodperc a v√°ltoz√°s
            for lane in incoming_lanes:
                if lane_green_times[lane] is None or abs(lane_green_times[lane] - green_time) >= change_threshold:
                    print(f"üö¶ S√°v: {lane} - Z√∂ld id≈ë v√°ltozott: {green_time:.1f} mp (Aut√≥k: {total_vehicles}, V√°rakoz√°s: {avg_waiting_time:.1f}s)")
                    traci.trafficlight.setPhaseDuration(junction_id, green_time)
                    lane_green_times[lane] = green_time  # Friss√≠tj√ºk a s√°v z√∂ld idej√©t

        except KeyError:
            print("Hiba a kimenet lek√©r√©s√©ben, ellen≈ërizd a fuzzy rendszert!")
            continue  # Visszaugr√°s a k√∂vetkez≈ë ciklusra

    traci.close()

if __name__ == "__main__":
    run_simulation()














...........................................................................................







import traci
import time

sumoCmd = ["sumo-gui", "-c", "osm.sumocfg"]
traci.start(sumoCmd)

auto_szam = 0
cel_auto_szam = 100

while auto_szam < cel_auto_szam:
    traci.simulationStep()
    auto_szam = traci.vehicle.getIDCount()
    print(f"Jelenlegi aut√≥k sz√°ma: {auto_szam}")
    time.sleep(0.1)  # Opcion√°lis: lass√≠tja a szimul√°ci√≥t a jobb l√°that√≥s√°g √©rdek√©ben

print(f"El√©rt√ºk a {cel_auto_szam} aut√≥t. Szimul√°ci√≥ le√°ll√≠t√°sa.")
traci.close()
   

Autoook szamaaaa








import traci
import numpy as np
import sumolib

# SUMO ind√≠t√°sa
sumoCmd = ["sumo-gui", "-c", "osm.sumocfg"]
traci.start(sumoCmd)

step = 0

# Fortuna keresztez≈ëd√©s adatai
traffic_light_Fortuna = "cluster_249821091_249821092_249821094_26003449_#13more"
detector1_0_f = "laneAreaDetector188302703#1_0"
detector1_1_f = "laneAreaDetector188302703#1_1"
detector1_2_f = "laneAreaDetector188302703#1_2"
detector2_0_f = "laneAreaDetector-869087990_0"
detector2_1_f = "laneAreaDetector-869087990_1"
detector3_0_f = "laneAreaDetector695614758_0"
detector3_1_f = "laneAreaDetector695614758_1"
detector3_2_f = "laneAreaDetector695614758_2"
detector4_0_f = "laneAreaDetector862984187_0"
detector4_1_f = "laneAreaDetector862984187_1"
detector4_2_f = "laneAreaDetector862984187_2"
detector4_3_f = "laneAreaDetector862984187_3"

# Tags√°gi f√ºggv√©nyek defin√≠ci√≥ja (h√°romsz√∂g f√ºggv√©nyek)
def triangle_membership(x, a, b, c):
    if a <= x <= b:
        return (x - a) / (b - a)
    elif b <= x <= c:
        return (c - x) / (c - b)
    else:
        return 0

def low_traffic(x):
    return triangle_membership(x, 0, 30, 60)

def medium_traffic(x):
    return triangle_membership(x, 30, 60, 90)

def high_traffic(x):
    return triangle_membership(x, 60, 90, 120)

def short_green(x):
    return triangle_membership(x, 10, 20, 30)

def medium_green(x):
    return triangle_membership(x, 20, 30, 40)

def long_green(x):
    return triangle_membership(x, 30, 40, 50)

# Line√°ris egyenletek defin√≠ci√≥ja
def linear_equations(traffic_density):
    green_duration1 = 50 - 0.5 * traffic_density  # Alacsony forgalom
    green_duration2 = 30 + 0.1 * traffic_density  # K√∂zepes forgalom
    green_duration3 = 10 + 0.2 * traffic_density  # Magas forgalom
    return green_duration1, green_duration2, green_duration3

# Fuzzy k√∂vetkeztet√©s
def fuzzy_inference(traffic_density):
    low = low_traffic(traffic_density)
    medium = medium_traffic(traffic_density)
    high = high_traffic(traffic_density)

    green1, green2, green3 = linear_equations(traffic_density)

    numerator = low * green1 + medium * green2 + high * green3
    denominator = low + medium + high

    if denominator == 0:
        return 30  # Alap√©rtelmezett √©rt√©k
    else:
        return numerator / denominator

while traci.simulation.getMinExpectedNumber() > 0:
    traci.simulationStep()

    # Forgalom s≈±r≈±s√©g m√©r√©se a detektorok alapj√°n
    traffic_density_fortuna = (
        traci.lanearea.getLastStepVehicleNumber(detector1_0_f) +
        traci.lanearea.getLastStepVehicleNumber(detector1_1_f) +
        traci.lanearea.getLastStepVehicleNumber(detector1_2_f) +
        traci.lanearea.getLastStepVehicleNumber(detector2_0_f) +
        traci.lanearea.getLastStepVehicleNumber(detector2_1_f) +
        traci.lanearea.getLastStepVehicleNumber(detector3_0_f) +
        traci.lanearea.getLastStepVehicleNumber(detector3_1_f) +
        traci.lanearea.getLastStepVehicleNumber(detector3_2_f) +
        traci.lanearea.getLastStepVehicleNumber(detector4_0_f) +
        traci.lanearea.getLastStepVehicleNumber(detector4_1_f) +
        traci.lanearea.getLastStepVehicleNumber(detector4_2_f) +
        traci.lanearea.getLastStepVehicleNumber(detector4_3_f)
    )

    # Fuzzy k√∂vetkeztet√©s alkalmaz√°sa
    green_duration = fuzzy_inference(traffic_density_fortuna)

    # Jelz≈ël√°mpa vez√©rl√©se
    traci.trafficlight.setPhaseDuration(traffic_light_Fortuna, green_duration)

    step += 1

traci.close()



#import numpy as np
#import traci
#import sumolib
#
#def triangle_membership(x, a, b, c):
#    """H√°romsz√∂g tags√°gi f√ºggv√©ny."""
#    if a <= x <= b:
#        return (x - a) / (b - a)
#    elif b <= x <= c:
#        return (c - x) / (c - b)
#    else:
#        return 0
#
## Forgalom s≈±r≈±s√©ge tags√°gi f√ºggv√©nyek
#def low_traffic(x):
#    return triangle_membership(x, 0, 30, 60)
#
#def medium_traffic(x):
#    return triangle_membership(x, 30, 60, 90)
#
#def high_traffic(x):
#    return triangle_membership(x, 60, 90, 120)
#
## Z√∂ld l√°mpa id≈ëtartama tags√°gi f√ºggv√©nyek
#def short_green(x):
#    return triangle_membership(x, 10, 20, 30)
#
#def medium_green(x):
#    return triangle_membership(x, 20, 30, 40)
#
#def long_green(x):
#    return triangle_membership(x, 30, 40, 50)
#    
#def linear_equations(traffic_density):
#    """Line√°ris egyenletek a kimenethez."""
#    green_duration1 = 50 - 0.5 * traffic_density  # Alacsony forgalom
#    green_duration2 = 30 + 0.1 * traffic_density  # K√∂zepes forgalom
#    green_duration3 = 10 + 0.2 * traffic_density  # Magas forgalom
#    return green_duration1, green_duration2, green_duration3
#
#def fuzzy_inference(traffic_density):
#    """Fuzzy k√∂vetkeztet√©s."""
#    rule1, rule2, rule3 = fuzzy_rules(traffic_density)
#    green1, green2, green3 = linear_equations(traffic_density)
#
#    # S√∫lyozott √°tlag sz√°m√≠t√°sa
#    numerator = rule1 * green1 + rule2 * green2 + rule3 * green3
#    denominator = rule1 + rule2 + rule3
#
#    if denominator == 0:
#        return 30 # Alapertelmezett √©rt√©k, ha egyik szab√°ly sem akt√≠v
#    else:
#        return numerator / denominator
#        
#def run_simulation():
#    sumoBinary = sumolib.checkBinary('sumo')
#    sumoCmd = [sumoBinary, "-c", "osm.sumocfg"]
#    traci.start(sumoCmd)
#    edge1=
#    trafficlight1= "cluster_249821091_249821092_249821094_26003449_#13more"
#    
#
#    for i in range(100):  # 100 szimul√°ci√≥s l√©p√©s
#        # P√©lda forgalom s≈±r≈±s√©g m√©r√©se (helyettes√≠tsd a saj√°t m√©r√©seddel)
#        traffic_density = traci.edge.getLastStepVehicleNumber("edge1") #p√©lda edge
#
#        green_duration = fuzzy_inference(traffic_density)
#        print(f"Traffic Density: {traffic_density}, Green Duration: {green_duration}")
#
#        # P√©lda jelz≈ël√°mpa id≈ëz√≠t√©s be√°ll√≠t√°sa (helyettes√≠tsd a saj√°t logik√°ddal)
#        traci.trafficlight.setPhaseDuration("trafficlight1", green_duration)
#
#        traci.simulationStep()
#
#    traci.close()
#
#if __name__ == "__main__":
#    run_simulation()
#
#
#
#
#
#
#
#
#
#
#
#
##import traci
##
##traci.start(["sumo-gui", "-c", "osm.sumocfg"])
##
##
##step = 0
##while traci.simulation.getMinNextStepLength() >= 0:
##    traci.simulationStep()
##    # Forgalomir√°ny√≠t√°si logika itt
##    step += 1
##
##
##traci.close()
##
##
#
#
#
#
##import traci
##import sumolib
##
##sumoBinary = sumolib.checkBinary('sumo')
##sumoCmd = [sumoBinary, "-c", "osm.sumocfg"]
##traci.start(sumoCmd)
##
##for i in range(10):
##    traci.simulationStep()
##
##traci.close()
##
#
#
#
#
#
#
#
#
#
#
#
#
#
#
##import traci
##import numpy as np
##import skfuzzy as fuzz
##from skfuzzy import control as ctrl
##
##sumoCmd = ["sumo-gui", "-c", "osm.sumocfg"]
##traci.start(sumoCmd)
##
##step = 0
##
##traffic_light_fortuna = "cluster_249821091_249821092_249821094_26003449_#13more"
##detector_fortuna_1 = "laneAreaDetector188302703#1_0"
##detector_fortuna_2 = "laneAreaDetector-869087990_0"
##
##forgalom_fortuna_1 = ctrl.Antecedent(np.arange(0, 100, 1), 'forgalom_1')
##forgalom_fortuna_2 = ctrl.Antecedent(np.arange(0, 100, 1), 'forgalom_2')
##
##forgalom_fortuna_1['kicsi'] = fuzz.trimf(forgalom_fortuna_1.universe, [0, 20, 40])
##forgalom_fortuna_1['kozepes'] = fuzz.trimf(forgalom_fortuna_1.universe, [20, 50, 80])
##forgalom_fortuna_1['nagy'] = fuzz.trimf(forgalom_fortuna_1.universe, [50, 80, 100])
##
##forgalom_fortuna_2['kicsi'] = fuzz.trimf(forgalom_fortuna_2.universe, [0, 20, 40])
##forgalom_fortuna_2['kozepes'] = fuzz.trimf(forgalom_fortuna_2.universe, [20, 50, 80])
##forgalom_fortuna_2['nagy'] = fuzz.trimf(forgalom_fortuna_2.universe, [50, 80, 100])
##
##def ts_rule1(forgalom1, forgalom2):
##    return 0.8 * forgalom1 + 0.2 * forgalom2 + 10
##
##def ts_rule2(forgalom1, forgalom2):
##    return 0.5 * forgalom1 + 0.5 * forgalom2 + 30
##
##def ts_rule3(forgalom1, forgalom2):
##    return 0.2 * forgalom1 + 0.8 * forgalom2 + 50
##
##while traci.simulation.getMinExpectedNumber() > 0:
##    traci.simulationStep()
##
##    forgalom1_ertek = traci.lanearea.getLastStepVehicleNumber(detector_fortuna_1)
##    forgalom2_ertek = traci.lanearea.getLastStepVehicleNumber(detector_fortuna_2)
##
##    # Szab√°lyok alkalmaz√°sa
##    if fuzz.interp_membership(forgalom_fortuna_1.universe, forgalom_fortuna_1['nagy'], forgalom1_ertek) > 0 and fuzz.interp_membership(forgalom_fortuna_2.universe, forgalom_fortuna_2['kicsi'], forgalom2_ertek) > 0:
##        zold_ido = ts_rule1(forgalom1_ertek, forgalom2_ertek)
##    elif fuzz.interp_membership(forgalom_fortuna_1.universe, forgalom_fortuna_1['kozepes'], forgalom1_ertek) > 0 and fuzz.interp_membership(forgalom_fortuna_2.universe, forgalom_fortuna_2['kozepes'], forgalom2_ertek) > 0:
##        zold_ido = ts_rule2(forgalom1_ertek, forgalom2_ertek)
##    elif fuzz.interp_membership(forgalom_fortuna_1.universe, forgalom_fortuna_1['kicsi'], forgalom1_ertek) > 0 and fuzz.interp_membership(forgalom_fortuna_2.universe, forgalom_fortuna_2['nagy'], forgalom2_ertek) > 0:
##        zold_ido = ts_rule3(forgalom1_ertek, forgalom2_ertek)
##    else:
##        zold_ido = 40  # Alap√©rtelmezett √©rt√©k
##
##    zold_ido_int = int(zold_ido)
##    piros_ido = 80 - zold_ido_int
##    traci.trafficlight.setRedYellowGreenState(traffic_light_fortuna, "g" * zold_ido_int + "r" * piros_ido + "g" * zold_ido_int + "r" * piros_ido)
##
##    step += 1
##
##traci.close()





